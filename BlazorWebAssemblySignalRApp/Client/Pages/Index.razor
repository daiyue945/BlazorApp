@page "/"
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        User:<input @bind="userInput" />
    </label>
</div>

<div class="form-group">
    <label>
        Message:<input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr />
<ul id="messageList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>
@code {
    private string? userInput;
    private string? messageInput;
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();

    //集线器初始化
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .Build();
        hubConnection.On<string, string>("ReceiveMessage",(user,message)=>
        {
            var encodedMsg = $"{user}:{message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });
        await hubConnection.StartAsync();
    }

    /// <summary>
    /// 发送消息
    /// </summary>
    /// <returns></returns>
    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage",userInput, messageInput);
        }
    }
    //集线器连接状态==已连接
    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    //集线器销毁
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}